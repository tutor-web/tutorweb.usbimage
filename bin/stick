#!/bin/sh
MOUNTPOINT=./tmpmnt
USBDEV="$1" ; shift
CMD="$1" ; shift
if [ -f "${USBDEV}" ] ; then
    USBIMAGE="${USBDEV}"
    USBDEV="$(losetup -P --find --show "${USBDEV}")"
    USBPART="$(losetup --find --show "${USBDEV}p1")"
else
    if [ -b "${USBDEV}-part1" ]; then
        USBPART="${USBDEV}-part1"
    elif [ -b "${USBDEV}1" ]; then
        USBPART="${USBDEV}1"
    else
        echo "Cannot find USBPART for ${}"
        exit 1
    fi
fi

mount_part() {
    echo Mounting ${USBPART} at $MOUNTPOINT ...
    mountpoint -q "$MOUNTPOINT" || mount "${USBPART}" "$MOUNTPOINT" || exit 1
}

do_rootlabel() {
    mount_part
    tune2fs -Ltwbox ${USBPART}
}

do_rootpwd() {
    do_chroot passwd root
}

do_rootfs() {
    # TODO: (echo o; echo n; echo p; echo 1; echo ; echo; echo w) | sudo fdisk ${USBDEV}
    mkfs.ext4 "${USBPART}"

    mount_part
    tar -C "$MOUNTPOINT" -xvf output/rootfs.tar
}

do_chroot() {
    mount_part
    TERM=xterm
    mount --bind /dev "$MOUNTPOINT/dev" || exit 1
    mount --bind /dev/pts "$MOUNTPOINT/dev/pts" || exit 1
    mount --bind /sys "$MOUNTPOINT/sys" || exit 1
    mount --bind /proc "$MOUNTPOINT/proc" || exit 1
    chroot "$MOUNTPOINT" $* || true
    sleep 1
    umount "$MOUNTPOINT/proc"
    umount "$MOUNTPOINT/sys"
    umount "$MOUNTPOINT/dev/pts"
    umount "$MOUNTPOINT/dev"
}

do_extra_install() {
    do_chroot /usr/bin/apt-get update
    do_chroot /usr/bin/apt-get install nginx mysql-server libmysqlclient-dev
}

do_grub_install() {
    mount_part
    cat > ${MOUNTPOINT}/boot/grub/device.map <<EOF
EOF
    echo "# update-grub"
    do_chroot /usr/sbin/update-grub
    echo "# grub-install"
    do_chroot /usr/sbin/grub-install \
        --no-floppy \
        --grub-mkdevicemap=/boot/grub/device.map \
        "${USBDEV}"
}

do_copy_user() {
    NEWUSER="$1"
    [ -d "/home/${NEWUSER}" ] || { echo "No user directory /home/${NEWUSER}"; exit 1; }

    mount_part
    mkdir -p "$MOUNTPOINT/home/${NEWUSER}/.ssh"
    cat "/home/${NEWUSER}/.ssh/authorized_keys" > "$MOUNTPOINT/home/${NEWUSER}/.ssh/authorized_keys"
    chown -R ${NEWUSER}:${NEWUSER} "$MOUNTPOINT/home/${NEWUSER}"

    for f in passwd shadow group; do
        grep -E "^${NEWUSER}:" /etc/$f >> "$MOUNTPOINT/etc/$f"
    done
    do_chroot /usr/sbin/usermod -aG sudo ${NEWUSER}
}

do_fill_stick() {
  PART_START=$(echo p | fdisk /dev/sda | awk '/^\/dev\/sda1/ { print $2 }')
  (
     echo p
     echo d1
     echo n
     echo p
     echo 1
     echo ${PART_START}
     echo 
     echo p
     echo w
  ) | fdisk -c=dos ${USBDEV} && e2fsck -f ${USBPART} && resize2fs ${USBPART}
}

[ -d "$MOUNTPOINT" ] || mkdir -- "$MOUNTPOINT"

do_$CMD "$@"

echo "Unmounting $MOUNTPOINT"
mountpoint -q "$MOUNTPOINT" && umount "$MOUNTPOINT"
rmdir -- "$MOUNTPOINT"
[ -n "${USBIMAGE}" ] && { losetup --detach "${USBPART}"; losetup --detach "${USBDEV}"; }
sync
